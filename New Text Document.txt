https://www.hackerrank.com/contests/mid-term-exam-a-basic-data-structures-a-batch-06/challenges

1/ #include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int val;
    Node *next;
    Node *prev;
    Node(int val) {
        this->val = val;
        this->next = NULL;
        this->prev = NULL;
    }
};

void insert_at_tail(Node *&head, Node *&tail, int val) {
    Node *newnode = new Node(val);
    if (head == NULL) {
        head = newnode;
        tail = newnode;
        return;
    }
    tail->next = newnode;
    newnode->prev = tail;
    tail = newnode;
}

void print_forward(Node *head) {
    Node *temp = head;
    while (temp != NULL) {
        cout << temp->val << " ";
        temp = temp->next;
    }
    cout << endl;
}

bool is_palindrome(Node *head) {
    if (!head) return true;
    Node *tail = head;
    while (tail->next != NULL) {
        tail = tail->next;
    }
    while (head != tail && head->prev != tail) {
        if (head->val != tail->val) {
            return false;
        }
        head = head->next;
        tail = tail->prev;
    }
    return true;
}

int main() {
    Node *head = NULL;
    Node *tail = NULL;
    int val;
    while (true) {
        cin >> val;
        if (val == -1) {
            break;
        }
        insert_at_tail(head, tail, val);
    }
    print_forward(head);
    if (is_palindrome(head)) {
        cout << "The list is a palindrome." << endl;
    } else {
        cout << "The list is not a palindrome." << endl;
    }
    return 0;
}



2/#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int val;
    Node *next;
    Node *prev;
    Node(int val) {
        this->val = val;
        this->next = NULL;
        this->prev = NULL;
    }
};

void insert_at_tail(Node *&head, Node *&tail, int val) {
    Node *newnode = new Node(val);
    if (head == NULL) {
        head = newnode;
        tail = newnode;
        return;
    }
    tail->next = newnode;
    newnode->prev = tail;
    tail = newnode;
}

bool is_palindrome(Node *head) {
    if (!head) return true;
    Node *tail = head;
    while (tail->next != NULL) {
        tail = tail->next;
    }
    while (head != tail && head->prev != tail) {
        if (head->val != tail->val) {
            return false;
        }
        head = head->next;
        tail = tail->prev;
    }
    return true;
}

int main() {
    Node *head = NULL;
    Node *tail = NULL;
    int val;
    while (true) {
        cin >> val;
        if (val == -1) {
            break;
        }
        insert_at_tail(head, tail, val);
    }
    if (is_palindrome(head)) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }
    return 0;
}


3/#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
    Node(int value) : data(value), next(nullptr), prev(nullptr) {}
};

class DoublyLinkedList {
public:
    Node* head;
    Node* tail;
    int size;

    DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    void insertAt(int index, int value) {
        if (index < 0 || index > size) {
            cout << "Invalid" << endl;
            return;
        }

        Node* newNode = new Node(value);

        if (index == 0) { // Insert at head
            newNode->next = head;
            if (head) head->prev = newNode;
            head = newNode;
            if (size == 0) tail = newNode; // If list was empty
        } else if (index == size) { // Insert at tail
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        } else { // Insert in the middle
            Node* current = head;
            for (int i = 0; i < index - 1; ++i) {
                current = current->next;
            }
            newNode->next = current->next;
            newNode->prev = current;
            current->next->prev = newNode;
            current->next = newNode;
        }

        size++;
        printList();
    }

    void printList() {
        // Print left to right
        cout << "L -> ";
        Node* current = head;
        while (current) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;

        // Print right to left
        cout << "R -> ";
        current = tail;
        while (current) {
            cout << current->data << " ";
            current = current->prev;
        }
        cout << endl;
    }
};

int main() {
    int Q;
    cin >> Q;

    DoublyLinkedList dll;

    for (int i = 0; i < Q; ++i) {
        int X, V;
        cin >> X >> V;
        dll.insertAt(X, V);
    }

    return 0;
}


4/#include <iostream>
#include <list>
using namespace std;

void printList(const list<long long>& dll) {
    // Print left to right
    cout << "L -> ";
    for (auto it = dll.begin(); it != dll.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;

    // Print right to left
    cout << "R -> ";
    for (auto it = dll.rbegin(); it != dll.rend(); ++it) {
        cout << *it << " ";
    }
    cout << endl;
}

int main() {
    int Q;
    cin >> Q;

    list<long long> dll;

    for (int i = 0; i < Q; ++i) {
        int X;
        long long V;
        cin >> X >> V;

        if (X == 0) {
            // Insert V at the head
            dll.push_front(V);
        } else if (X == 1) {
            // Insert V at the tail
            dll.push_back(V);
        } else if (X == 2) {
            // Delete the Vth index (0-based)
            if (V >= 0 && V < dll.size()) {
                auto it = dll.begin();
                advance(it, V);
                dll.erase(it);
            }
        }
        printList(dll);
    }

    return 0;
}



5/#include <iostream>
#include <list>
#include <string>
using namespace std;

int main() {
    list<string> addresses;
    string address;

    // Reading the addresses until "end"
    while (cin >> address && address != "end") {
        addresses.push_back(address);
    }

    int Q;
    cin >> Q;

    list<string>::iterator current = addresses.end(); // Iterator for current position

    while (Q--) {
        string command, target;
        cin >> command;

        if (command == "visit") {
            cin >> target;
            auto it = find(addresses.begin(), addresses.end(), target);
            if (it != addresses.end()) {
                current = it;
                cout << *current << endl;
            } else {
                cout << "Not Available" << endl;
            }
        } else if (command == "next") {
            if (current != addresses.end() && next(current) != addresses.end()) {
                ++current;
                cout << *current << endl;
            } else {
                cout << "Not Available" << endl;
            }
        } else if (command == "prev") {
            if (current != addresses.begin() && current != addresses.end()) {
                --current;
                cout << *current << endl;
            } else {
                cout << "Not Available" << endl;
            }
        }
    }

    return 0;
}
